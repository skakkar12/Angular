//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC5_Angular_Api2_CRUD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SamplesEntities : DbContext
    {
        public SamplesEntities()
            : base("name=SamplesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeeData> EmployeeDatas { get; set; }
    
        public virtual int ADDNewEmployee(string emp_Name, string email, string country, Nullable<int> projectID, string managerName)
        {
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDNewEmployee", emp_NameParameter, emailParameter, countryParameter, projectIDParameter, managerNameParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> emp_ID)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", emp_IDParameter);
        }
    
        public virtual ObjectResult<ReadAllEmployee_Result> ReadAllEmployee(string emp_Name, string country, string managerName)
        {
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadAllEmployee_Result>("ReadAllEmployee", emp_NameParameter, countryParameter, managerNameParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> emp_ID, string emp_Name, string email, string country, string managerName)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", emp_IDParameter, emp_NameParameter, emailParameter, countryParameter, managerNameParameter);
        }
    }
}
